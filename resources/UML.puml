@startuml
interface canvas.ICanvasMsg {
~ String getPaintState()
~ String getPaintType()
~ Color getColor()
~ Point getPoint()
~ String getText()
~ String getUsername()
}
class client.User {
+ {static} void main(String[])
}
class client.Client {
- {static} long serialVersionUID
- String username
- boolean isManager
- boolean hasAccess
- Canvas canvas
- IBoardMgr server
- ConcurrentHashMap<String,Point> points
- String canvasName
- String canvasPath
- JFrame window
- JButton blackBt
- JButton greenBt
- ArrayList<JButton> colorBts
- JButton colorUse
- JButton freeBt
- ArrayList<JButton> drawBts
- JButton newBt
- ArrayList<JButton> funcBts
- DefaultListModel<String> clientList
- JList<String> clientJList
- JScrollPane clientWindow
- DefaultListModel<String> chatHistory
- JTextField chatMsg
- JScrollPane chatWindow
- JButton sendBt
- ActionListener colorListener
- ActionListener paintListener
- ActionListener funcListener
- MouseListener kickListener
- WindowListener quitListener
- MouseListener sendChatListener
+ String getUsername()
+ void setUsername(String)
+ void setAsManager()
+ boolean needAccess(String)
+ boolean getAccess()
+ void setAccess(boolean)
+ void syncClientList(Set<IClient>)
+ void syncCanvas(ICanvasMsg)
+ void cleanCanvas()
+ byte[] getCurrentCanvas()
+ void overrideCanvas(byte[])
+ void forceQuit()
+ void syncChat(String)
+ DefaultListModel<String> getChatHistory()
+ void syncChatHistory(DefaultListModel<String>)
+ void configUI()
+ void renderUI()
- void mgrOpen()
- void mgrSave()
- void mgrSaveAs()
}
class server.Server {
+ {static} void main(String[])
}
interface server.IBoardMgr {
~ void login(IClient)
~ boolean invalidUsername(String)
~ Set<IClient> getClients()
~ void syncClientList()
~ void quitClient(String)
~ void kickClient(String)
~ void removeAllClients()
~ void broadcastMsg(ICanvasMsg)
~ byte[] sendCurrentCanvas()
~ void sendExistCanvas(byte[])
~ void cleanCanvas()
~ void broadcastChat(String)
~ void syncChatHistory(IClient)
}
class client.ClientMgr {
- Set<IClient> clientList
+ Set<IClient> getClientList()
+ void addClient(IClient)
+ void delClient(IClient)
+ boolean hasNoClient()
}
class WhiteBoard {
+ {static} void main(String[])
}
class server.BoardMgr {
- ClientMgr manager
- IClient clientManager
+ void login(IClient)
+ boolean invalidUsername(String)
+ Set<IClient> getClients()
+ void syncClientList()
+ void quitClient(String)
+ void kickClient(String)
+ void removeAllClients()
+ void broadcastMsg(ICanvasMsg)
+ byte[] sendCurrentCanvas()
+ void sendExistCanvas(byte[])
+ void cleanCanvas()
+ void broadcastChat(String)
+ void syncChatHistory(IClient)
}
class canvas.CanvasMsg {
- {static} long serialVersionUID
- String drawState
- String paintType
- Color color
- Point point
- String text
- String username
+ String getPaintState()
+ String getPaintType()
+ Color getColor()
+ Point getPoint()
+ String getText()
+ String getUsername()
}
interface client.IClient {
~ String getUsername()
~ void setUsername(String)
~ void setAsManager()
~ boolean needAccess(String)
~ boolean getAccess()
~ void setAccess(boolean)
~ void syncClientList(Set<IClient>)
~ void syncCanvas(ICanvasMsg)
~ void cleanCanvas()
~ byte[] getCurrentCanvas()
~ void overrideCanvas(byte[])
~ void forceQuit()
~ void syncChat(String)
~ DefaultListModel<String> getChatHistory()
~ void syncChatHistory(DefaultListModel<String>)
~ void configUI()
~ void renderUI()
}
class canvas.Utils {
+ {static} String line
+ {static} String circle
+ {static} String triangle
+ {static} String rectangle
+ {static} String text
+ {static} String free
+ {static} String eraser
+ {static} Color silver
+ {static} Color maroon
+ {static} Color purple
+ {static} Color fuchsia
+ {static} Color green
+ {static} Color lime
+ {static} Color olive
+ {static} Color navy
+ {static} Color teal
+ {static} Color aqua
+ {static} BasicStroke defaultStroke
+ {static} BasicStroke thickStroke
+ {static} Font defaultFont
+ {static} String paintStart
+ {static} String painting
+ {static} String paintEnd
+ {static} Color bgColor
+ {static} LineBorder border
+ {static} LineBorder antiBorder
+ {static} int windowWidth
+ {static} int windowHeight
+ {static} int canvasWidth
+ {static} int canvasHeight
+ {static} int drawBtWidth
+ {static} int drawBtHeight
+ {static} int funcBtWidth
+ {static} int funcBtHeight
+ {static} int clientWindowWidth
+ {static} int clientWindowHeight
+ {static} int chatWindowWidth
+ {static} int chatWindowHeight
+ {static} int msgWindowWidth
+ {static} int msgWindowHeight
+ {static} void selectButton(JButton,ArrayList<JButton>)
+ {static} ImageIcon resizeIcon(String,int,int)
}
class canvas.Canvas {
- {static} long serialVersionUID
- String username
- boolean isManager
- String paintType
- Color color
- Point start
- String text
- IBoardMgr boardMgr
- Graphics2D g2
- BufferedImage frame
- BufferedImage savedFrame
- MouseListener startListener
- MouseMotionAdapter motionListener
- MouseListener endListener
+ void paintComponent(Graphics)
+ Color getColor()
+ Graphics2D getG2()
+ BufferedImage getFrame()
+ void renderFrame(BufferedImage)
+ void cleanCanvas()
+ void saveCanvas()
+ BufferedImage getCanvasImage()
+ void line()
+ void circle()
+ void triangle()
+ void rectangle()
+ void text()
+ void free()
+ void eraser()
+ Shape drawLine(Point,Point)
+ Shape drawCircle(Point,Point)
+ Shape drawTriangle(Point,Point)
+ Shape drawRectangle(Point,Point)
+ void black()
+ void white()
+ void gray()
+ void silver()
+ void maroon()
+ void red()
+ void purple()
+ void fuchsia()
+ void green()
+ void lime()
+ void olive()
+ void yellow()
+ void navy()
+ void blue()
+ void teal()
+ void aqua()
}
class client.Creator {
+ {static} void main(String[])
}


java.rmi.Remote <|-- canvas.ICanvasMsg
client.IClient <|.. client.Client
java.rmi.server.UnicastRemoteObject <|-- client.Client
java.rmi.Remote <|-- server.IBoardMgr
server.IBoardMgr <|.. server.BoardMgr
java.io.Serializable <|.. server.BoardMgr
java.rmi.server.UnicastRemoteObject <|-- server.BoardMgr
canvas.ICanvasMsg <|.. canvas.CanvasMsg
java.rmi.server.UnicastRemoteObject <|-- canvas.CanvasMsg
java.rmi.Remote <|-- client.IClient
canvas.JPanel <|-- canvas.Canvas
@enduml